// Generated by CoffeeScript 1.8.0
'use strict';
var Backbone, global, _, _base, _base1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

global = typeof exports !== "undefined" && exports !== null ? exports : window;

_ = (typeof exports !== 'undefined' ? require('underscore') : global)._;

Backbone = typeof exports !== 'undefined' ? require('backbone') : global.Backbone;

if (global.bbui == null) {
  global.bbui = {};
}

if (bbui.Util == null) {
  bbui.Util = {};
}

if ((_base = bbui.Util).encodeLatLng == null) {
  _base.encodeLatLng = function(ll) {
    if (ll instanceof google.maps.LatLng) {
      return ll.toUrlValue(13);
    } else {
      return null;
    }
  };
}

if ((_base1 = bbui.Util).decodeLatLng == null) {
  _base1.decodeLatLng = function(str) {
    var ll;
    if (typeof str === 'string' && str.indexOf(',' > 8)) {
      return new google.maps.LatLng((ll = str.split(','))[0], ll[1]);
    } else {
      return null;
    }
  };
}

Backbone.controls.MapView = (function(_super) {
  __extends(MapView, _super);

  function MapView() {
    return MapView.__super__.constructor.apply(this, arguments);
  }

  MapView.prototype.__muted = false;

  MapView.prototype.setNear = function(near, radius) {
    if (radius == null) {
      radius = 25;
    }
    return Backbone.controls.MapView.GeoCode(near, (function(_this) {
      return function(res, stat) {
        var d, loc, neDest, swDest;
        _this.__muted = true;
        loc = new GeoPoint(res[0].geometry.location.lat(), res[0].geometry.location.lng());
        swDest = new google.maps.LatLng((d = loc.destinationPoint(225, radius)).lat(), d.lon());
        neDest = new google.maps.LatLng((d = loc.destinationPoint(45, radius)).lat(), d.lon());
        return _this.$el.gmap('get', 'map').fitBounds(new google.maps.LatLngBounds(swDest, neDest));
      };
    })(this));
  };

  MapView.prototype.addMarkers = function(value) {
    this.clearMarkers();
    _.each((_.isArray(value) ? value : [value]), (function(_this) {
      return function(itm, idx) {
        return _this.$el.gmap('addMarker', itm, (function(map, marker) {
          $(marker).mouseover(function(evt) {
            return _this.trigger('mouseover', {
              selected: idx
            });
          });
          return $(marker).click(function(evt) {
            return _this.trigger('click', {
              selected: idx
            });
          });
        }), {
          bounds: false
        });
      };
    })(this));
    if (this.__map != null) {
      this.fitMarkers();
    }
    return this;
  };

  MapView.prototype.getMarkers = function() {
    return this.$el.gmap('get', 'markers');
  };

  MapView.prototype.clearMarkers = function() {
    this.$el.gmap('clear', 'markers');
    return this;
  };

  MapView.prototype.setZoom = function(zoom) {
    var _ref;
    return (_ref = this.__map) != null ? _ref.setZoom(zoom) : void 0;
  };

  MapView.prototype.setCenter = function(latlon) {
    var _ref;
    return (_ref = this.__map) != null ? _ref.setCenter(latlon) : void 0;
  };

  MapView.prototype.panTo = function(latlon) {
    var _ref;
    return (_ref = this.__map) != null ? _ref.panTo(latlon) : void 0;
  };

  MapView.prototype.panToBounds = function(bounds) {
    var _ref;
    return (_ref = this.__map) != null ? _ref.panToBounds(bounds) : void 0;
  };

  MapView.prototype.getBounds = function() {
    var _ref;
    return (_ref = this.__map) != null ? _ref.getBounds() : void 0;
  };

  MapView.prototype.fitBounds = function(bounds) {
    var _ref;
    return (_ref = this.__map) != null ? _ref.fitBounds(bounds) : void 0;
  };

  MapView.prototype.inBounds = function(latlon) {
    var b;
    if ((b = this.getBounds()) != null) {
      return b.contains(latlon);
    }
  };

  MapView.prototype.fitMarkers = function() {
    var bounds, marker, update, _i, _len, _ref;
    bounds = this.getBounds();
    update = false;
    _ref = this.getMarkers();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      marker = _ref[_i];
      if (!this.inBounds(marker.position)) {
        update = true;
        bounds.extend(marker.position);
      }
    }
    if (update) {
      return this.fitBounds(bounds);
    }
  };

  MapView.prototype.setOptions = function(o) {
    var bounds, p, _ref;
    p = {};
    _.each(o, (function(_this) {
      return function(v, k) {
        if (_this.model.attributes.hasOwnProperty(k)) {
          return p[k] = v;
        }
      };
    })(this));
    this.model.set(p, {
      silent: true
    });
    if (this.__map != null) {
      this.__muted = true;
      $(this.__map).bind('bounds_changed', (function(_this) {
        return function() {
          _this._muted = false;
          return $(_this.__map).unbind('bounds_changed');
        };
      })(this));
      if ((bounds = (_ref = this.model) != null ? typeof _ref.getBounds === "function" ? _ref.getBounds() : void 0 : void 0) != null) {
        this.$el.gmap('get', 'map').fitBounds(bounds);
      }
    } else {
      this.__pendingOpts = this.model.attributes;
    }
    return this;
  };

  MapView.prototype.zoomHandler = function() {
    if (!this.__muted) {
      this.trigger('zoom_changed', {
        zoom: this.__map.getZoom()
      });
    }
    return this.__muted = false;
  };

  MapView.prototype.init = function(o) {
    this.model = new (Backbone.Model.extend({
      __map: this,
      defaults: {
        zoom: 18,
        panControl: false,
        streetViewControl: false,
        mapTypeControl: false,
        navigationControl: false,
        disableDefaultUI: true,
        backgroundColor: "#fff"
      },
      initialize: function(o) {
        return this.on('change', (function(_this) {
          return function(evt) {
            var m;
            if ((m = _this.getBounds()) != null) {
              return _this.attributes.center = m.center;
            }
          };
        })(this));
      }
    }));
    if (o != null) {
      this.setOptions(o);
    }
    return this.$el.gmap(this.model.attributes).bind('init', (function(_this) {
      return function(evt, map) {
        var name;
        _this.__map = map;
        $.fn[(name = 'zoom_changed')] = function(a, b) {
          return $(map).addEventListener(name, a, b);
        };
        $(map).zoom_changed((function() {
          return _this.zoomHandler();
        }));
        if (typeof _this.__pendingOpts !== 'undefined') {
          _this.setOptions(_this.__pendingOpts);
          delete _this.__pendingOpts;
          _this.__muted = false;
        }
        $(map).dragend(function() {
          return _this.trigger('dragend', Backbone.controls.MapView.formatBounds(map.getBounds()));
        });
        _this.fitMarkers();
        return _this.trigger('ready');
      };
    })(this));
  };

  return MapView;

})(Backbone.CompositeView);

Backbone.controls.MapView.formatBounds = function(bounds) {
  if (!(bounds instanceof google.maps.LatLngBounds)) {
    return null;
  }
  return {
    latLngNe: bbui.Util.encodeLatLng(bounds.getNorthEast()),
    latLngSw: bbui.Util.encodeLatLng(bounds.getSouthWest())
  };
};

Backbone.controls.MapView.GeoCode = function(place, callback) {
  var req;
  if (!(callback != null)) {
    throw new Error('callback is undefined');
  }
  if (typeof place !== 'string') {
    if (place instanceof google.maps.LatLng) {
      req = {
        location: new google.maps.LatLng(place)
      };
    } else if (place instanceof google.maps.LatLngBounds) {
      req = {
        bounds: new google.maps.LatLngBounds(place)
      };
    } else {
      return null;
    }
  } else {
    req = {
      address: place
    };
  }
  new google.maps.Geocoder().geocode(_.extend(req, {
    region: 'US'
  }), callback);
  return null;
};

Backbone.controls.MapView.getBoundsRad = function(bounds) {
  var ll;
  if (!(bounds instanceof google.maps.LatLngBounds)) {
    throw new Error('value must be type google.maps.LatLngBounds');
  }
  return ((new GeoPoint((ll = bounds.getSouthWest()).lat(), ll.lng())).distanceTo(new GeoPoint((ll = bounds.getNorthEast()).lat(), ll.lng()))) / 2;
};
